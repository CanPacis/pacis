package ui

import "fmt"

templ avatarWrapper(c *AvatarComponent) {
	if c.tooltip {
		@Tooltip(c.data) {
			@avatar(c)
		}
	} else {
		@avatar(c)
	}
}

templ avatar(c *AvatarComponent) {
	<div
		class={ class(c.classList, "border", "rounded-full", "size-10", "aspect-square", 
		"bg-p-background-100", "border-p-gray-400", "cursor-pointer", 
      *sw(
        c.variance().Size, 
        []Variant{SizeHuge, SizeLarge, SizeMedium, SizeSmall, SizeTiny},
        "size-16 text-2xl","size-12 text-xl","size-10 text-sm","size-8 text-sm","size-6 text-xs",
      ),
    ) }
		if !c.tooltip {
			title={ c.data }
		}
		{ c.getAttrs("base")... }
	>
		if has(c.img) {
			<img src={ c.img } alt={ c.data } class="object-cover font-bold size-full rounded-inherit"/>
		} else {
			<span class="flex items-center justify-center text-center size-full">
				{ getInitials(c.data) }
			</span>
		}
	</div>
}

type AvatarComponent struct {
	VariantComponent[*AvatarComponent]
	img     string
	data    string
	tooltip bool
}

func (c *AvatarComponent) Img(img string) *AvatarComponent {
	c.img = img
	return c
}

func (c *AvatarComponent) Tooltip() *AvatarComponent {
	c.tooltip = true
	return c
}

func Avatar(data string) *AvatarComponent {
	c := &AvatarComponent{
		data: data,
	}
	c.Component = NewComponent(c, avatarWrapper)
	return c
}

func (c *AvatarGroupComponent) getAvatars() []*AvatarComponent {
	if c.max < 0 || c.max > len(c.avatars) {
		return c.avatars
	}

	return c.avatars[:c.max]
}

func (c *AvatarGroupComponent) getDiff() int {
	return len(c.avatars) - len(c.getAvatars())
}

templ avatarGroup(c *AvatarGroupComponent) {
	<div class="flex mr-6 flex-nowrap">
		for _, avatar := range c.getAvatars() {
			@avatar.AddClass(
				*sw(
					avatar.variance().Size,
					[]Variant{SizeHuge, SizeLarge, SizeMedium, SizeSmall, SizeTiny},
					"-mr-6", "-mr-5", "-mr-4", "-mr-4", "-mr-2",
				),
			)
		}
		if c.getDiff() > 0 {
			@Avatar(fmt.Sprintf("+ %d", c.getDiff()))
		}
	</div>
}

type AvatarGroupComponent struct {
	VariantComponent[*AvatarGroupComponent]
	avatars []*AvatarComponent
	max     int
}

func (c *AvatarGroupComponent) Add(avatars ...*AvatarComponent) *AvatarGroupComponent {
	c.avatars = append(c.avatars, avatars...)
	return c
}

func (c *AvatarGroupComponent) Max(max int) *AvatarGroupComponent {
	c.max = max
	return c
}

func AvatarGroup(avatars ...*AvatarComponent) *AvatarGroupComponent {
	c := &AvatarGroupComponent{
		avatars: avatars,
		max:     -1,
	}
	c.Component = NewComponent(c, avatarGroup)
	return c
}
