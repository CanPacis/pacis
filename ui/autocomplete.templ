package ui

import "fmt"

templ autocomplete(c *AutocompleteComponent) {
	@templ.JSONScript(c.ID(), toSerializedOptions(c.items))
	<div x-data="{ value: '', result: null, active: null }" x-autocomplete={ fmt.Sprintf("'%s'", c.ID()) }>
		<div class="w-full" x-ref="anchor">
			@Input().Type(InputTypeSearch).Placeholder("Search...").FullWidth().Attr("x-model.debounce", "value", "input")
		</div>
		<div
			class="relative w-full"
			x-show="result !== null"
			x-click-outside="result = null"
			data-click-outside-if="result !== null"
		>
			<div
				class={ class(c.classList, "border w-full bg-p-background-100 border-p-gray-400 rounded-xl flex flex-col gap-1 z-[99999]",
        sw(c.variance().Size,
          []Variant{SizeHuge, SizeLarge, SizeMedium, SizeSmall, SizeTiny},
          "p-2 min-w-56",
          "p-2 min-w-48",
          "p-2 min-w-44",
          "p-2 min-w-40",
          "p-1 min-w-36",
        ),
      ) }
				{ generateAnchor(AnchorBottomStart, 8)... }
				{ c.getAttrs("base")... }
			>
				for _, item := range c.items {
					@MenuItem().FullWidth().Attr("data-id", item.GetID()).Attr("x-on:click", fmt.Sprintf("value = '%s'; await $nextTick(); result = null", item.GetLabel())).Attr("x-show", fmt.Sprintf("result !== null && result.includes('%s')", item.GetID())).Attr(":class", fmt.Sprintf("active === '%s' ? 'bg-p-gray-alpha-100' : ''", item.GetID())) {
						{ item.GetLabel() }
					}
				}
				<div x-show="result !== null && result.length === 0" class="flex justify-center py-2 text-sm text-center text-p-gray-900">
					No results found
				</div>
			</div>
		</div>
	</div>
}

type AutocompleteComponent struct {
	VariantComponent[*AutocompleteComponent]
	items     []Option
	fullwidth bool
}

func (c *AutocompleteComponent) FullWidth() *AutocompleteComponent {
	c.fullwidth = true
	return c
}

func Autocomplete(items []Option) *AutocompleteComponent {
	c := &AutocompleteComponent{
		items: items,
	}
	c.Component = NewComponent(c, autocomplete)

	return c
}
