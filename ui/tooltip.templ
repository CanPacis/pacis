package ui

import (
	"fmt"
	"time"
)

css delay(delay time.Duration) {
	--delay: { fmt.Sprintf("%dms", int64(delay / time.Millisecond)) };
}

templ tooltip(c *TooltipComponent) {
	<span
		role="tooltip"
		x-data={ kv(c.hover, "", "{ hover:false }") }
		class={ "size-fit", "tooltip-wrapper", kv(c.hover, "hover") }
	>
		<span x-ref="anchor" class="size-fit">
			{ children... }
		</span>
		<span
			if !c.hover {
				:class="hover && '!block'"
			}
			class={ class(c.classList, "px-3", "py-2", "text-sm", "rounded-lg", "tooltip", "bg-p-background-100", 
      "border", "border-p-gray-400", "shadow-lg", "z-50", delay(c.delay)) }
			{ generateAnchor(c.position, 10)... }
			{ c.getAttrs("base")... }
		>
			{ c.label }
		</span>
	</span>
}


type TooltipComponent struct {
	Component[*TooltipComponent]
	label    string
	delay    time.Duration
	position AnchorPosition
	hover    bool
}

func (c *TooltipComponent) Delay(delay time.Duration) *TooltipComponent {
	c.delay = delay
	return c
}

func (c *TooltipComponent) Position(position AnchorPosition) *TooltipComponent {
	c.position = position
	return c
}

func (c *TooltipComponent) NoHover() *TooltipComponent {
	c.hover = false
	return c
}

func Tooltip(label string) *TooltipComponent {
	c := &TooltipComponent{
		label: label,
		hover: true,
	}
	c.Component = NewComponent(c, tooltip)
	return c
}
