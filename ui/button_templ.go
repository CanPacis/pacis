// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func (c *ButtonComponent) getIconSize() int {
	return *sw(
		c.variance().Size,
		[]Variant{SizeTiny, SizeSmall, SizeMedium, SizeLarge, SizeHuge},
		12, 14, 16, 22, 26,
	)
}

func button(c *ButtonComponent) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var2 = []any{class(c.classList, "flex", "items-center", "relative", "justify-center", "transition",
			"duration-100", "focus-visible:focus-ring", "whitespace-nowrap", "focusable",
			sw(
				c.variance().Size,
				[]Variant{SizeHuge, SizeLarge, SizeMedium, SizeSmall, SizeTiny},
				"text-lg h-16 px-8 min-w-16 gap-4",
				"text-base h-12 px-7 min-w-16 gap-3",
				"text-sm h-10 px-5 min-w-16 gap-[10px]",
				"text-sm h-8 px-4 gap-[10px]",
				"text-xs h-6 px-2 gap-1",
			),
			kv(c.fullWidth, "w-full flex-1"),
			kv(c.variance().Form == FormDisabled,
				"bg-p-gray-100 text-gray-500 hover:bg-p-gray-100 cursor-not-allowed",
				"active:translate-y-[1px]",
				*sw(
					c.variance().Color,
					[]Variant{ColorPrimary, ColorSecondary, ColorSubtle},
					"bg-p-gray-1000 hover:bg-p-gray-1100 text-p-background-100",
					"bg-p-gray-200 hover:bg-p-gray-300 text-p-gray-alpha-1000 border border-p-gray-400",
					"bg-transparent hover:bg-p-gray-alpha-200 text-p-gray-alpha-1000",
				),
			),
			kv(has(c.startIcon),
				*sw(
					c.variance().Size,
					[]Variant{SizeTiny, SizeSmall, SizeMedium, SizeLarge, SizeHuge},
					"pl-2", "pl-3", "pl-3", "pl-5", "pl-6",
				),
			),
			kv(has(c.endIcon),
				*sw(
					c.variance().Size,
					[]Variant{SizeTiny, SizeSmall, SizeMedium, SizeLarge, SizeHuge},
					"pr-2", "pr-3", "pr-3", "pr-5", "pr-6",
				),
			),
			kv(c.variance().Loading == ElementLoading, "pointer-events-none"),
			string(c.radius),
		)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<button")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if c.variance().Loading != UndefinedVariant {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" x-data=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(*sw(
				c.variance().Loading,
				[]Variant{ElementLoading, ElementLoaded},
				"{ loading: true }", "{ loading: false }",
			))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/button.templ`, Line: 18, Col: 4}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/button.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if c.variance().Form == FormDisabled {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" disabled=\"disabled\" aria-disabled=\"true\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			if c.variance().Loading != UndefinedVariant {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" :disabled=\"loading\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		if c.variance().Loading != UndefinedVariant {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" :class=\"loading &amp;&amp; &#39;pointer-events-none&#39;\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, c.getAttrs("base"))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" role=\"button\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if has(c.startIcon) {
			templ_7745c5c3_Err = Icon(c.startIcon).Size(c.getIconSize()).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if has(c.endIcon) {
			templ_7745c5c3_Err = Icon(c.endIcon).Size(c.getIconSize()).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if c.variance().Loading != UndefinedVariant {
			var templ_7745c5c3_Var5 = []any{
				"absolute", "flex", "items-center", "justify-center", "size-full", "rounded-inherit",
				*sw(
					c.variance().Color,
					[]Variant{ColorPrimary, ColorSecondary},
					"bg-p-gray-1000",
					"bg-p-gray-200",
				),
			}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var5...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<span x-show=\"loading\" class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var5).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = Spinner().Variant(SizeSmall).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

type ButtonType string

const (
	ButtonTypeButton ButtonType = "button"
	ButtonTypeSubmit ButtonType = "submit"
	ButtonTypeReset  ButtonType = "reset"
)

type ButtonComponent struct {
	VariantComponent[*ButtonComponent]
	variant   Variant
	fullWidth bool
	startIcon string
	endIcon   string
	radius    Radius
}

func (c *ButtonComponent) Type(typ ButtonType) *ButtonComponent {
	c.setAttr("type", typ)
	return c
}

func (c *ButtonComponent) Value(value string) *ButtonComponent {
	c.setAttr("value", value)
	return c
}

func (c *ButtonComponent) Disabled(disabled bool) *ButtonComponent {
	if disabled {
		return c.Variant(FormDisabled)
	} else {
		return c.Variant(FormEnabled)
	}
}

func (c *ButtonComponent) StartIcon(icon string) *ButtonComponent {
	c.startIcon = icon
	return c
}

func (c *ButtonComponent) EndIcon(icon string) *ButtonComponent {
	c.endIcon = icon
	return c
}

func (c *ButtonComponent) Radius(r Radius) *ButtonComponent {
	c.radius = r
	return c
}

func (c *ButtonComponent) FullWidth() *ButtonComponent {
	c.fullWidth = true
	return c
}

func (c *ButtonComponent) Loading(loading bool) *ButtonComponent {
	if loading {
		return c.Variant(ElementLoading)
	} else {
		return c.Variant(ElementLoaded)
	}
}

func Button() *ButtonComponent {
	c := &ButtonComponent{
		radius: Rounded,
	}
	c.Component = NewComponent(c, button)
	c.setAttr("type", ButtonTypeButton)
	return c
}

func IconButton(icon string) *ButtonComponent {
	return Button().StartIcon(icon).EndIcon("").AddClass("aspect-square active:scale-[0.96]").RemoveClass("pl-6 pl-5 pl-3 pl-2 pr-6 pr-5 pr-3 pr-2 min-w-16 px-8 px-7 px-5 px-4 px-2 active:translate-y-[1px]")
}
